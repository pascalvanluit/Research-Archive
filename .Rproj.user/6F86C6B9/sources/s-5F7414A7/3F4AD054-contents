---
title: "Simulation Study"
author: "Pascal van Luit"
date: "13 February 2020"
output: html_document
---

## Exploring the use of the cSEM.DGP package

Installing cSEM and cSEM.DGP packages:
- cSEM pack
```{r}
set.seed(88)
library(lavaan)
library(semPlot)
library(devtools)
library(simsem)

devtools::install_github("M-E-Rademaker/cSEM")

devtools::install_github("M-E-Rademaker/cSEM.DGP")
```

Specifying the DGP Model for my simulation study:
```{r}
# Parameters to vary:
lambda <- 0.7
delta  <- 0.4
rho    <- 0.8

# Specifying a DGP model:
DGP.model <- " f1 =~ lambda * x1 + lambda * x2 + lambda * x3 + delta * x4
               f2 =~ lambda * x4 + lambda * x5 + lambda * x6 
               f1 ~~ rho * f2 "

# Fitting the model to a dataset:
fit.DGP <- lavaan::cfa(DGP.model, HolzingerSwineford1939)

# Checking the path diagram:
semPlot::semPaths(fit.DGP)
```
The above attempt does not quite give me what I want. The arrows are simply labelled but i do not think the values are actually in the labels so to speak.

Below I try to simulate data using the generateData function from the cSEM.DGP package:
```{r}
DGP.model.2 <- " 
    # Structural model
    f1 ~~ rho*f2

    # Measurement model
    f1 =~ lambda*x1 + lambda*x2 + lambda*x3 + delta*x4
    f2 =~ lambda*x4 + lambda*x5 + lambda*x6 "

DGP.data.2 <- cSEM.DGP::generateData(DGP.model.2, .return_type = "cor",
                                     lambda = c(0.2, 0.5, 0.8),
                                     delta  = c(0.2, 0.5, 0.8),
                                     rho    = c(0.2, 0.5, 0.8),
                                     .handle_negative_definite = "drop"
                                     )

DGP.data.2

DGP.data.2$dgp[[2]]
```
Problem: cannot simulate data with a cross-loading (having one indicator connected to several constructs).


Example from lavaan package:
```{r}
# specify population model
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3 + 0.6*x4
                      f2 =~ x4 + 0.5*x5 + 1.5*x6
                      f3 =~ x7 + 0.1*x8 + 0.9*x9

                      f3 ~ 0.5*f1 + 0.6*f2
                    '


# generate data
myData <- simulateData(population.model, sample.nobs = 100L)
head(myData)
cov(myData)

# Let's see if this method allows a cross-loading in the simulation:
fit.lavaan.model <- lavaan::cfa(population.model, HolzingerSwineford1939)

semPlot::semPaths(fit.lavaan.model)

# It does!
```

Can data from my model be simulated using lavaan::simulateData?
```{r}
set.seed(88)

lambda <- 0.7
delta  <- 0.4
rho    <- 0.8

DGP.model <- " 
    # Structural model
    f1 ~ rho*f2

    # Measurement model
    f1 =~ lambda*x1 + lambda*x2 + lambda*x3 + delta*x4
    f2 =~ lambda*x4 + lambda*x5 + lambda*x6 "

DGP.data <- lavaan::simulateData(model = DGP.model)

cor <- cor(DGP.data)

fit.lavaan.my.model <- lavaan::cfa(DGP.model, HolzingerSwineford1939)

semPlot::semPaths(fit.lavaan.my.model)

```









How about with simsem?
- simsem requires more set up stuff...

Example 20: Simulation with varying sample size and parameters:
```{r}
loading <- matrix(0, 10, 2)
loading[1:7, 1] <- NA
loading[7:10, 2] <- NA
LY <- bind(loading, "runif(1, 0.3, 0.9)")

RPS <- binds(diag(2))

RTE <- binds(diag(10))

path <- matrix(0, 2, 2)
path[2, 1] <- NA
BE <- bind(path, "runif(1, 0, 0.9)")

latentReg <- model(LY = LY, RPS = RPS, RTE = RTE, BE = BE, modelType = "SEM")
```

```{r}
Output <- sim(NULL, n = 100, latentReg)
summary(Output)
```


Set up for simsem method for my model:
- sample size can be specified in sim function.
- delta, lambda and rho must be specified beforehand in simsem style.
```{r}
# Creating a matrix for all loadings:
loadings <- matrix(0, 6, 2)

  # Making a space for loadings on f1:
  loadings[1:4, 1] <- NA

  # Making a space for loadings on f2:
  loadings[4:6, 2] <- NA

  # Loading values:
  loadingValues <- matrix(0, 6, 2)
  loadingValues[1:3, 1] <- 0.1
  loadingValues[4, 1]   <- 0.4
  loadingValues[4:6, 2] <- 0.1
  
# Lambda values:
LY <- bind(loadings, loadingValues)
  # This does not (yet) ensure that each lambda strength is used the same amount of times.
LY

# Correlation matrix of observed variables:
RTE <- binds(diag(6))
RTE

# Covariance between latent (endogenous) variables:
latent.cor <- matrix(NA, 2, 2)
diag(latent.cor) <- 1
RPS <- binds(latent.cor, 0.5)
RPS


my.model <- model(LY = LY, RTE = RTE, RPS = RPS, modelType = "CFA")
generate(my.model, 50)
# sim(5, n = 10, my.model)
?sim
```

Trying examples of simsem:
```{r}
loading <- matrix(0, 6, 2)
loading[1:4, 1] <- NA

loading[4:6, 2] <- NA
LY <- bind(loading, 0.7)
LY

latent.cor <- matrix(NA, 2, 2)
diag(latent.cor) <- 1
RPS <- binds(latent.cor, 0.5)
RPS

error.cor <- matrix(0, 6, 6)
diag(error.cor) <- 1
RTE <- binds(error.cor)
RTE

CFA.Model <- model(LY = LY, RPS = RPS, RTE = RTE, modelType="CFA")

Output <- sim(4, n = 40000, CFA.Model)
dat <- generate(CFA.Model, 100)
analyze(CFA.Model, dat)

```


